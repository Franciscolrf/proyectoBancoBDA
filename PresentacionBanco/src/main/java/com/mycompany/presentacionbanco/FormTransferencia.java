/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.presentacionbanco;

import com.mycompany.dominiobanco.Cliente;
import com.mycompany.dominiobanco.Cuenta;
import com.mycompany.dominiobanco.Transaccion;
import com.mycompany.dominiobanco.Transferencia;
import conexion.IConexion;
import dao.ICuentaDAO;
import dao.ITransaccionDAO;
import dao.ITransferenciaDAO;
import dao.TransaccionDAO;
import dao.TransferenciaDAO;
import dto.TransaccionNuevaDTO;
import dto.TransferenciaNuevaDTO;
import excepciones.PersistenciaException;
import java.awt.event.KeyEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author ID145
 */
public class FormTransferencia extends javax.swing.JFrame {

    private Cliente cliente;
    private ICuentaDAO cuentaDAO;
    private final IConexion conexion;
    private Cuenta cuenta;
    private ITransaccionDAO transaccionDAO;
    private ITransferenciaDAO transferenciaDAO;

    /**
     * Creates new form Transferencia
     */
    public FormTransferencia(Cliente cliente, Cuenta cuenta, ICuentaDAO cuentaDAO, IConexion conexion) {
        initComponents();
        this.conexion = conexion;
        this.cuentaDAO = cuentaDAO;
        this.cliente = cliente;
        this.cuenta = cuenta;
        transaccionDAO = new TransaccionDAO(conexion);
        transferenciaDAO = new TransferenciaDAO(conexion);
        String saludo = txtSaludo.getText().replaceAll("Usuario", cliente.getNombres());
        txtSaludo.setText(saludo);
        txtIDeTarjeta.setText("Tarjeta " + cuenta.getNumero());

        txtIDeTarjeta.setText("Tarjeta " + cuenta.getNumero() + " Saldo disp. $" + cuenta.getSaldo());

    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        txtTitulo = new javax.swing.JLabel();
        txtIDeTarjeta = new javax.swing.JLabel();
        txtNumCuenDestino = new javax.swing.JLabel();
        txtCantidad = new javax.swing.JLabel();
        tfiNumCuenDestino = new javax.swing.JTextField();
        tfiCantidad = new javax.swing.JTextField();
        txtSaludo = new javax.swing.JLabel();
        btnVolver = new javax.swing.JButton();
        btnTransferirTarjetas = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(236, 238, 238));

        jPanel2.setBackground(new java.awt.Color(255, 102, 102));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 35, Short.MAX_VALUE)
        );

        txtTitulo.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        txtTitulo.setForeground(new java.awt.Color(0, 0, 0));
        txtTitulo.setText("Transferencia");

        txtIDeTarjeta.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        txtIDeTarjeta.setForeground(new java.awt.Color(51, 51, 51));
        txtIDeTarjeta.setText("Tarjeta");

        txtNumCuenDestino.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        txtNumCuenDestino.setForeground(new java.awt.Color(51, 51, 51));
        txtNumCuenDestino.setText("Numero de cuenta destinataria:");

        txtCantidad.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        txtCantidad.setForeground(new java.awt.Color(51, 51, 51));
        txtCantidad.setText("Cantidad:");

        tfiNumCuenDestino.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        tfiNumCuenDestino.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfiNumCuenDestinoKeyTyped(evt);
            }
        });

        tfiCantidad.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        tfiCantidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfiCantidadKeyTyped(evt);
            }
        });

        txtSaludo.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        txtSaludo.setForeground(new java.awt.Color(0, 0, 0));
        txtSaludo.setText("Â¡Hola, Usuario!");

        btnVolver.setText("Volver");
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });

        btnTransferirTarjetas.setText("Transferir");
        btnTransferirTarjetas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTransferirTarjetasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtCantidad)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtTitulo)
                        .addComponent(txtIDeTarjeta)
                        .addComponent(txtNumCuenDestino)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtSaludo)
                        .addGap(38, 38, 38))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnVolver)
                                .addGap(23, 23, 23)
                                .addComponent(btnTransferirTarjetas))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(tfiCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(tfiNumCuenDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(149, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSaludo)
                    .addComponent(txtTitulo))
                .addGap(84, 84, 84)
                .addComponent(txtIDeTarjeta)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNumCuenDestino)
                    .addComponent(tfiNumCuenDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCantidad)
                    .addComponent(tfiCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnVolver)
                    .addComponent(btnTransferirTarjetas))
                .addContainerGap(54, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnTransferirTarjetasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTransferirTarjetasActionPerformed
        if (tfiNumCuenDestino.getText().isEmpty() || tfiCantidad.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Todos los campos tienen que estar llenos.");

            return;
        }
        //Creamos la transaccion
        if (validarSaldo() == false) {
            JOptionPane.showMessageDialog(this, "No dispone del saldo suficiente");
            return;
        }
        String cuentaNumDestino = tfiNumCuenDestino.getText();
        Cuenta cuentaDestino = existenciaCuenta(Integer.valueOf(cuentaNumDestino));
        if (cuentaDestino == null) {
            JOptionPane.showMessageDialog(this, "Cuenta no encontrada");
            return;
        }
        if (!cuentaDestino.isEsta_activo()) {
            JOptionPane.showMessageDialog(this, "La cuenta esta inactiva");
            return;
        }

        if (cuentaDestino.getId_cuenta() == cuenta.getId_cuenta()) {
            JOptionPane.showMessageDialog(this, "No se puede transferir a la misma cuenta");
            return;

        }
        TransaccionNuevaDTO trasanccionNueva = new TransaccionNuevaDTO();
        trasanccionNueva.setMonto(Float.parseFloat(tfiCantidad.getText()));
        trasanccionNueva.setTipo("transferencia");
        trasanccionNueva.setId_cuenta(cuenta.getId_cuenta());
        Transaccion transaccionNueva = crearTransaccion(trasanccionNueva);

        //Creamos la transferencia
        TransferenciaNuevaDTO transferenciaNueva = new TransferenciaNuevaDTO();

        //int cuentaDestino = Integer.valueOf(tfiNumCuenDestino.getText());
        transferenciaNueva.setCuenta_destino(cuentaDestino.getId_cuenta());

        transferenciaNueva.setId_transaccion(transaccionNueva.getId());

        Transferencia trasferenciaNueva = crearTransferencia(transferenciaNueva);
        Cuenta cuentaTransmisor = obtenerCuenta(cuenta.getId_cliente());

        try {
            cuentaDAO.actualizarMontoTransaccion(this.cuenta, Integer.parseInt(tfiNumCuenDestino.getText()), Float.parseFloat(tfiCantidad.getText()));
        } catch (PersistenciaException pe) {
            System.out.println(pe);
        }
        ConfirmacionTransferencia ct = new ConfirmacionTransferencia(cliente, this.cuenta, transaccionNueva, tfiNumCuenDestino.getText(), cuentaDAO, conexion);
        ct.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnTransferirTarjetasActionPerformed

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        Tarjeta tarjeta = new Tarjeta(cliente, this.cuenta, conexion, cuentaDAO);
        tarjeta.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnVolverActionPerformed

    private void tfiNumCuenDestinoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfiNumCuenDestinoKeyTyped
        int key = evt.getKeyChar();
        boolean numero = key >= 48 && key <= 57;

        if (!numero) {
            evt.consume();
        }
    }//GEN-LAST:event_tfiNumCuenDestinoKeyTyped

    private void tfiCantidadKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfiCantidadKeyTyped
        char c = evt.getKeyChar();
        boolean esDigito = (c >= '0' && c <= '9');
        boolean esPunto = (c == '.' && !tfiCantidad.getText().contains("."));
        boolean esBorrar = (c == KeyEvent.VK_BACK_SPACE);
        boolean esDatosValidos = esDigito || esPunto || esBorrar;

        if (tfiCantidad.getText().contains(".")) {
            int puntoIndex = tfiCantidad.getText().indexOf(".");
            int dotPosition = tfiCantidad.getText().length() - puntoIndex - 1;
            if (dotPosition >= 2 && esDigito && tfiCantidad.getSelectionStart() > puntoIndex) {
                evt.consume();
                return;
            }
        }

        if (!esDatosValidos) {
            evt.consume();
        }
    }//GEN-LAST:event_tfiCantidadKeyTyped
    private boolean validarSaldo() {
        float saldoDisponible = cuenta.getSaldo();
        String saldoTransferir = tfiCantidad.getText();
        return saldoDisponible > Float.valueOf(saldoTransferir) && Float.valueOf(saldoTransferir) > 0;
    }

    private Cuenta existenciaCuenta(int cuentaNum) {
        Cuenta cuenta = null;
        try {
            cuenta = this.cuentaDAO.consultarCuenta(cuentaNum);
        } catch (PersistenciaException ex) {
            Logger.getLogger(PantallaInicial.class.getName()).log(Level.SEVERE, null, ex);
        }
        return cuenta;
    }
                                                     

                                            

                                          

                                       

                                          
    /**
     * Crea una nueva transacciÃ³n utilizando la informaciÃ³n proporcionada en un
     * objeto TransaccionNuevaDTO.
     *
     * @param trasanccionNueva El objeto TransaccionNuevaDTO que contiene la
     * informaciÃ³n de la nueva transacciÃ³n.
     * @return El objeto Transaccion creado y persistido en la base de datos, o
     * null si ocurriÃ³ una excepciÃ³n durante la persistencia.
     */
    private Transaccion crearTransaccion(TransaccionNuevaDTO trasanccionNueva) {
        Transaccion transaccion = null;
        try {

            transaccion = this.transaccionDAO.agregar(trasanccionNueva);
        } catch (PersistenciaException ex) {
            Logger.getLogger(FormTransferencia.class.getName()).log(Level.SEVERE, null, ex);
        }
        return transaccion;
    }

    /**
     * Crea una nueva transferencia utilizando la informaciÃ³n proporcionada en
     * un objeto TransferenciaNuevaDTO.
     *
     * @param trasferenciaNueva El objeto TransferenciaNuevaDTO que contiene la
     * informaciÃ³n de la nueva transferencia.
     * @return El objeto Transferencia creado y persistido en la base de datos,
     * o null si ocurriÃ³ una excepciÃ³n durante la persistencia.
     */
    private Transferencia crearTransferencia(TransferenciaNuevaDTO trasferenciaNueva) {
        Transferencia transferencia = null;
        try {
            transferencia = this.transferenciaDAO.agregar(trasferenciaNueva);
        } catch (PersistenciaException ex) {
            Logger.getLogger(FormTransferencia.class.getName()).log(Level.SEVERE, null, ex);
        }
        return transferencia;
    }

    /**
     * Obtiene una instancia de Cuenta a partir del ID proporcionado.
     *
     * @param id El ID de la cuenta que se desea obtener.
     * @return La Cuenta correspondiente al ID proporcionado, o null si no se
     * encuentra.
     */
    private Cuenta obtenerCuenta(int id) {
        Cuenta cuenta = null;
        try {
            cuenta = this.cuentaDAO.consultarCuentaId(id);
        } catch (PersistenciaException ex) {
            Logger.getLogger(PantallaInicial.class.getName()).log(Level.SEVERE, null, ex);
        }
        return cuenta;
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnTransferirTarjetas;
    private javax.swing.JButton btnVolver;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField tfiCantidad;
    private javax.swing.JTextField tfiNumCuenDestino;
    private javax.swing.JLabel txtCantidad;
    private javax.swing.JLabel txtIDeTarjeta;
    private javax.swing.JLabel txtNumCuenDestino;
    private javax.swing.JLabel txtSaludo;
    private javax.swing.JLabel txtTitulo;
    // End of variables declaration//GEN-END:variables
}
